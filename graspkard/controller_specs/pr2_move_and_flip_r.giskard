scope = {
	unitX = vec3(1,0,0);
	unitY = vec3(0,1,0);
	unitZ = vec3(0,0,1);

	j_torso_lift    = input(0);

	j_shoulder_pan  = input(1);
	j_shoulder_lift = input(2);
	j_upper_arm_roll= input(3);
	j_elbow_flex    = input(4);
	j_forearm_roll  = input(5);
	j_wrist_flex    = input(6);
	j_wrist_roll    = input(7);
	j_gripper       = input(8);

	# Container relative to gripper/wrist
	spat_ig_pos = vec3(input(9), input(10), input(11));
	spat_ig_rot = rotation(vec3(input(12), input(13), input(14)), input(15));

	# Goal frame and radius
	goal_pos = vec3(input(16), input(17), input(18));
	goal_rot = rotation(vec3(input(19), input(20), input(21)), input(22));
	goal = frame(goal_rot, goal_pos);

	spat_radius = 0.5 * input(23);
	goal_radius = input(24);

	torso_lift       = frame(rotation(unitX, 0), vec3(-0.05, 0, 0.739675 + j_torso_lift));
	shoulder_pan  = frame(rotation(unitZ, j_shoulder_pan),   vec3(0, -0.188, 0));
	shoulder_lift = frame(rotation(unitY, j_shoulder_lift),  vec3(0.1, 0, 0));
	upper_arm_roll= frame(rotation(unitX, j_upper_arm_roll), vec3(0, 0, 0));
	elbow_flex    = frame(rotation(unitY, j_elbow_flex),     vec3(0.4, 0, 0));
	forearm_roll  = frame(rotation(unitX, j_forearm_roll),   vec3(0, 0, 0));
	wrist_flex    = frame(rotation(unitY, j_wrist_flex),     vec3(0.321, 0, 0));
	wrist_roll    = frame(rotation(unitX, j_wrist_roll),     vec3(0, 0, 0));

	elbow = torso_lift * shoulder_pan * shoulder_lift * upper_arm_roll * elbow_flex ;
	wrist = elbow * forearm_roll * wrist_flex * wrist_roll;
	spat = wrist * frame(spat_ig_rot, spat_ig_pos);

	spat_pos = spat.pos;
	spat_rot = spat.rot;
	spatX = spat_rot * unitX;
	spatY = spat_rot * unitY;
	spatZ = spat_rot * unitZ;

	# Move spatula above goal area
	idk = cross(spat_pos - goal_pos, goal_rot * unitZ);
	r_dist = 0.015 - norm(idk);
	r_dist_err = max(-r_dist, -0.1); # Limit speed to avoid harsh accelerations
	
	z_pos_ctrl = spat_pos.z;
	z_pos_low = cos(asin(spatZ.z)) * spat_radius + goal_pos.z + 0.04 - z_pos_ctrl;
	z_pos_high = 3 * spat_radius + goal_pos.z + 0.04 - z_pos_ctrl;
	
	# Freeze rotation
	upright_ctrl = spatZ.z;
	goal_con = r_dist / goal_radius;
	upright_err = (min(1, goal_con * goal_con) - upright_ctrl);

	# Weights
	negVelLimitTorso = -0.02;
	posVelLimitTorso =  0.02;
	negVelLimitArm   = -0.6;
	posVelLimitArm   =  0.6;

	weightGripper = 0.001;
	weightArm   = weightGripper * 10;
	weightTorso = weightArm * 10;

	weightPositionGoal = 2;
	weightRotationGoal = 4;


	feedback = spatZ.z
}

controllableConstraints = {
	controllableConstraint(negVelLimitTorso, posVelLimitTorso, weightTorso, 0, "j_torso_lift");
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, 1, "j_shoulder_pan_r");
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, 2, "j_shoulder_lift_r");
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, 3, "j_upper_arm_roll_r");
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, 4, "j_elbow_flex_r");
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, 5, "j_forearm_roll_r");
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, 6, "j_wrist_flex_r");
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightGripper, 7, "j_wrist_roll_r");
	controllableConstraint(negVelLimitArm, posVelLimitArm, 1, 8, "j_gripper")
}

softConstraints = {
	softConstraint(upright_err, upright_err, weightRotationGoal, upright_ctrl, "Upright Alignment");
	softConstraint(z_pos_low, z_pos_high, weightPositionGoal, z_pos_ctrl, "Z-Position control");
	softConstraint(r_dist_err, r_dist_err, weightPositionGoal, r_dist, "Radial position")
}	

hardConstraints = {
	hardConstraint(0.0115 - j_torso_lift, 0.325 - j_torso_lift, j_torso_lift);
	
	# # Right arm constraints
	hardConstraint(-2.1353 - j_shoulder_pan,  0.5646 - j_shoulder_pan,   j_shoulder_pan);
	hardConstraint(-0.3536 - j_shoulder_lift, 1.2963 - j_shoulder_lift,  j_shoulder_lift);
	hardConstraint(-3.75   - j_upper_arm_roll,  0.65 - j_upper_arm_roll, j_upper_arm_roll);
	hardConstraint(-2.1213 - j_elbow_flex,     -0.15 - j_elbow_flex,     j_elbow_flex);
	hardConstraint(-2.0    - j_wrist_flex,      -0.1 - j_wrist_flex,     j_wrist_flex)
}