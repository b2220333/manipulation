import "package://giskard_suturo_parser/gpplib/math.gpp";

# Joint Positions
	j_torso_lift      = inputJoint("torso_lift_joint");
	j_shoulder_pan_l  = inputJoint("l_shoulder_pan_joint");
	j_shoulder_lift_l = inputJoint("l_shoulder_lift_joint");
	j_upper_arm_roll_l= inputJoint("l_upper_arm_roll_joint");
	j_elbow_flex_l    = inputJoint("l_elbow_flex_joint");
	j_forearm_roll_l  = inputJoint("l_forearm_roll_joint");
	j_wrist_flex_l    = inputJoint("l_wrist_flex_joint");
	j_wrist_roll_l    = inputJoint("l_wrist_roll_joint");
	j_shoulder_pan_r  = inputJoint("r_shoulder_pan_joint");
	j_shoulder_lift_r = inputJoint("r_shoulder_lift_joint");
	j_upper_arm_roll_r= inputJoint("r_upper_arm_roll_joint");
	j_elbow_flex_r    = inputJoint("r_elbow_flex_joint");
	j_forearm_roll_r  = inputJoint("r_forearm_roll_joint");
	j_wrist_flex_r    = inputJoint("r_wrist_flex_joint");
	j_wrist_roll_r    = inputJoint("r_wrist_roll_joint");

	# Robot
	torso_lift     = frame(rotation(unitX, 0),                vec3(-0.05, 0, 0.739675 + j_torso_lift));
	
	shoulder_pan_l   = frame(rotation(unitZ, j_shoulder_pan_l),   vec3(0, 0.188, 0));
	shoulder_lift_l  = frame(rotation(unitY, j_shoulder_lift_l),  vec3(0.1, 0, 0));
	upper_arm_roll_l = frame(rotation(unitX, j_upper_arm_roll_l), vec3(0, 0, 0));
	elbow_flex_l     = frame(rotation(unitY, j_elbow_flex_l),     vec3(0.4, 0, 0));
	forearm_roll_l   = frame(rotation(unitX, j_forearm_roll_l),   vec3(0, 0, 0));
	wrist_flex_l     = frame(rotation(unitY, j_wrist_flex_l),     vec3(0.321, 0, 0));
	wrist_roll_l     = frame(rotation(unitX, j_wrist_roll_l),     vec3(0, 0, 0));
	gripper_offset_l = frame(rotation(unitX, 0),                vec3(0.18, 0, 0));
	
	shoulder_pan_r   = frame(rotation(unitZ, j_shoulder_pan_r),   vec3(0, -0.188, 0));
	shoulder_lift_r  = frame(rotation(unitY, j_shoulder_lift_r),  vec3(0.1, 0, 0));
	upper_arm_roll_r = frame(rotation(unitX, j_upper_arm_roll_r), vec3(0, 0, 0));
	elbow_flex_r     = frame(rotation(unitY, j_elbow_flex_r),     vec3(0.4, 0, 0));
	forearm_roll_r   = frame(rotation(unitX, j_forearm_roll_r),   vec3(0, 0, 0));
	wrist_flex_r     = frame(rotation(unitY, j_wrist_flex_r),     vec3(0.321, 0, 0));
	wrist_roll_r     = frame(rotation(unitX, j_wrist_roll_r),     vec3(0, 0, 0));
	gripper_offset_r = frame(rotation(unitX, 0),                vec3(0.18, 0, 0));

	# Frame chains
	elbow_l = torso_lift * shoulder_pan_l * shoulder_lift_l * upper_arm_roll_l * elbow_flex_l ;
	wrist_l = elbow_l * forearm_roll_l * wrist_flex_l * wrist_roll_l;
	ee_l = wrist_l * gripper_offset_l ;

	elbow_r = torso_lift * shoulder_pan_r * shoulder_lift_r * upper_arm_roll_r * elbow_flex_r ;
	wrist_r = elbow_r * forearm_roll_r * wrist_flex_r * wrist_roll_r;
	ee_r    = wrist_r * gripper_offset_r ;

	# Weights
	negVelLimitTorso = -0.02;
	posVelLimitTorso =  0.02;
	negVelLimitArm   = -0.6;
	posVelLimitArm   =  0.6;

	weightTorso = 0.001;
	weightArm   = 0.001;


	# Outputs
	leftElbow = elbow_l;
	leftGripper = ee_l;
	rightElbow = elbow_r;
	rightGripper = ee_r;

	torso_controllable = [controllableC(negVelLimitTorso, posVelLimitTorso, weightTorso, "torso_lift_joint")];
	
	leftArm_controllable = [
	controllableC(negVelLimitArm, posVelLimitArm, weightArm, "l_shoulder_pan_joint"),
	controllableC(negVelLimitArm, posVelLimitArm, weightArm, "l_shoulder_lift_joint"),
	controllableC(negVelLimitArm, posVelLimitArm, weightArm, "l_upper_arm_roll_joint"),
	controllableC(negVelLimitArm, posVelLimitArm, weightArm, "l_elbow_flex_joint"),
	controllableC(negVelLimitArm, posVelLimitArm, weightArm, "l_forearm_roll_joint"),
	controllableC(negVelLimitArm, posVelLimitArm, weightArm, "l_wrist_flex_joint"),
	controllableC(negVelLimitArm, posVelLimitArm, weightArm, "l_wrist_roll_joint")];
	upperBody_LA_controllable = torso_controllable + leftArm_controllable;	

	rightArm_controllable = [
	controllableC(negVelLimitArm, posVelLimitArm, weightArm, "r_shoulder_pan_joint"),
	controllableC(negVelLimitArm, posVelLimitArm, weightArm, "r_shoulder_lift_joint"),
	controllableC(negVelLimitArm, posVelLimitArm, weightArm, "r_upper_arm_roll_joint"),
	controllableC(negVelLimitArm, posVelLimitArm, weightArm, "r_elbow_flex_joint"),
	controllableC(negVelLimitArm, posVelLimitArm, weightArm, "r_forearm_roll_joint"),
	controllableC(negVelLimitArm, posVelLimitArm, weightArm, "r_wrist_flex_joint"),
	controllableC(negVelLimitArm, posVelLimitArm, weightArm, "r_wrist_roll_joint")];		
	upperBody_RA_controllable = torso_controllable + rightArm_controllable;

	fullBody_controllable = torso_controllable + leftArm_controllable + rightArm_controllable;

	hardConstraints = [
	hardC(0.0115 - j_torso_lift, 0.325 - j_torso_lift, j_torso_lift),
	# Left arm constraints
	hardC(-0.5646 - j_shoulder_pan_l,  2.1353 - j_shoulder_pan_l,   j_shoulder_pan_l),
	hardC(-0.3536 - j_shoulder_lift_l, 1.2963 - j_shoulder_lift_l,  j_shoulder_lift_l),
	hardC(-0.65   - j_upper_arm_roll_l,  3.75 - j_upper_arm_roll_l, j_upper_arm_roll_l),
	hardC(-2.1213 - j_elbow_flex_l,     -0.15 - j_elbow_flex_l,     j_elbow_flex_l),
	hardC(-2.0    - j_wrist_flex_l,      -0.1 - j_wrist_flex_l,     j_wrist_flex_l),	
	
	# # Right arm constraints
	hardC(-2.1353 - j_shoulder_pan_r,  0.5646 - j_shoulder_pan_r,   j_shoulder_pan_r),
	hardC(-0.3536 - j_shoulder_lift_r, 1.2963 - j_shoulder_lift_r,  j_shoulder_lift_r),
	hardC(-3.75   - j_upper_arm_roll_r,  0.65 - j_upper_arm_roll_r, j_upper_arm_roll_r),
	hardC(-2.1213 - j_elbow_flex_r,     -0.15 - j_elbow_flex_r,     j_elbow_flex_r),
	hardC(-2.0    - j_wrist_flex_r,      -0.1 - j_wrist_flex_r,     j_wrist_flex_r)];